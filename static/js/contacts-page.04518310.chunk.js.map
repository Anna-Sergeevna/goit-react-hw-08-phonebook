{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","components/Section/Section.jsx","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","views/ContactsPage.jsx","components/Section/Section.module.css"],"names":["module","exports","Section","title","children","className","s","section","getLoading","state","contacts","loading","getContacts","items","getFilter","filter","getVisibleContacts","normalizeFilter","toLowerCase","trim","contact","name","includes","ContactForm","useState","setName","number","setNumber","useSelector","contactsSelectors","dispatch","useDispatch","handleChange","e","currentTarget","value","reset","onSubmit","preventDefault","map","toast","error","contactsOperations","addContact","success","text","type","pattern","required","input","onChange","disabled","button","Filter","contactsActions","changeFilter","ContactList","useEffect","fetchContacts","list","id","item","phone","onClick","deleteContact","onDeleteContact","Contacts"],"mappings":"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","file":"static/js/contacts-page.04518310.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"ContactForm_text__3j3GS\",\"input\":\"ContactForm_input__2OdoI\",\"button\":\"ContactForm_button__1OkaT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__2Nf4O\",\"text\":\"Filter_text__2xlOo\",\"input\":\"Filter_input__38GCR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__16D9a\",\"item\":\"ContactList_item__2VKAr\",\"name\":\"ContactList_name__3nluz\",\"button\":\"ContactList_button__1Js53\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section className={s.section}>\n      {title && <h2 className={s.title}>{title}</h2>}\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","export const getLoading = state => state.contacts.loading;\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizeFilter = filter.toLowerCase().trim();\r\n\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizeFilter),\r\n  );\r\n};\r\n","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toast } from 'react-hot-toast';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts/index';\r\nimport s from './ContactForm.module.css';\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const haldleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (contacts.map(contact => contact.name).includes(name)) {\r\n      toast.error(`${name} is already in contacts.`);\r\n    } else {\r\n      dispatch(contactsOperations.addContact({ name, number }));\r\n      toast.success('Add contact');\r\n    }\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    // <form onSubmit={haldleSubmit} autoComplete='off'>\r\n    <form onSubmit={haldleSubmit}>\r\n      <label>\r\n        <p className={s.text}>Name</p>\r\n        <input\r\n          type='text'\r\n          name='name'\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          className={s.input}\r\n          value={name}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        <p className={s.text}>Number</p>\r\n        <input\r\n          type='tel'\r\n          name='number'\r\n          pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\r\n          title='Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +'\r\n          required\r\n          className={s.input}\r\n          value={number}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <button type='submit' disabled={!name} className={s.button}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsActions, contactsSelectors } from 'redux/contacts/index';\r\nimport s from './Filter.module.css';\r\n\r\nfunction Filter() {\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label>\r\n      <p className={s.text}>Find contacts by name</p>\r\n      <input\r\n        type='text'\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        className={s.input}\r\n        value={value}\r\n        onChange={e =>\r\n          dispatch(contactsActions.changeFilter(e.currentTarget.value))\r\n        }\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { toast } from 'react-hot-toast';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contacts/index';\r\nimport s from './ContactList.module.css';\r\n\r\nfunction ContactList() {\r\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteContact = id =>\r\n    dispatch(\r\n      contactsOperations.deleteContact(id),\r\n      toast.success('Delete contact'),\r\n    );\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.item}>\r\n          <p className={s.name}>{name}:</p>\r\n          <p className={s.phone}>{number}</p>\r\n\r\n          <button\r\n            type='button'\r\n            className={s.button}\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\n// import { useSelector } from 'react-redux';\r\nimport Section from '../components/Section';\r\nimport ContactForm from '../components/ContactForm';\r\nimport Filter from '../components/Filter';\r\nimport ContactList from '../components/ContactList';\r\n// import { getLoading } from './redux/contacts/contacts-selectors';\r\n\r\nconst Contacts = () => (\r\n  // const isLoadingContacts = useSelector(getLoading);\r\n\r\n  <>\r\n    <Section title='Phonebook'>\r\n      <ContactForm />\r\n    </Section>\r\n\r\n    {/* {isLoadingContacts && <Loader />} */}\r\n\r\n    <Section title='Contacts'>\r\n      <Filter />\r\n      <ContactList />\r\n    </Section>\r\n  </>\r\n);\r\n\r\nexport default Contacts;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1wVP4\",\"title\":\"Section_title__2ln0v\"};"],"sourceRoot":""}